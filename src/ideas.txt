find new weird bracket for scopes 
allow multiple forms of if else ie when, if and otherwiswe, else
unless condtion alternative alternative
tree language
lexically scoped at call time
help programmer autoclose things
weird bracket mismatch combinations 
quotation using ;
lazy evaluation
functions: keyword fanction, varidiac + for 1 or more * for 0 or more  preceded by number of non variadiac arguments
use 'param number' or "param number" to acces parameter
! function that takes at least 3 arguments (note that the third argument become part of the varidiac argument in this case arg3)
! if we used * instead of plus it could take at least 2 arguemtn
fanction 2+ ᚜
    ([('3' null?] not} assert]
    {"1" print)
᚛ 

link label [label]
@name -> label naem

until conditon do loop -> while _ {}
go-through  _ of _ loop -> for _ in _ {}
continue-doing loop -> loop {}
stop -> break/return (must have value)
skip -> continue

empty-tree = ;() or ;[) ...
strings = .actual words. escape sequnece/interpolation tbd
numbers: floating hex
booleans: & is true | is false ? is maybe (b/c were going for tree, we also should have 3 boolean values)

casing shneigans on keywords

if a condtional hits a maybe it will randomly choose to go or not

should try to `help` in most interesting way (using randomnsess....)

maybee exverything besides for strings should be quoted so string do not have to be dot delinmted