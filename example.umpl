((plus 1:10))> ! prints 17, the greater than signifies that this should be the printed, the bang symbol signifies a comment, numbers must be in hexadecimal but will be printed in decimal

potato ðŸ˜‚3 â§¼ ! to create a function we use the potato keyword, functions must be nameed with a single emoji, we put the number of args in brackets ([])
    create final with ((add $1 $2))< ! ! we use the create keyword to create a variable and the with keyword to assign a value to the variable, to refrence the args from a function use $1 for the first arg and so on
    ! adds both arg1 and arg2, the less than signifies that this should not be the printed and sets it to the final variable
    return final
}
(new ðŸ˜‚ 10:0x1A)> ! we use the new keyword to call a function followed by function names and colon separated args, prints 32, when the first digit of number is a letre prefix with 0x

list it with [1:2]< ! creates a list with the values  1,2 (in hex), list can only have two elements
(it.first with 2)< ! sets the first element of the it list to 2, we can also use something like addwith mulitply with  which will add  or multiple by the variable to/by the value
(it.second with 4)> ! sets the second element of the it list to 4 and print its

create bool with true
create other-bool with ((not bool))< ! creates a variable called bool and sets it to true, then creates a variable called other-bool and sets it to the opposite of bool, when we call a function in a variable defenition we must use an expression to call the function
(other-bool)> ! prints false
(other-bool with true)> ! prints other-bool: true, we set other-bool to true, so it prints true

if {(not bool)<} â§¼ ! the {} must evalte to a boolean, we can also use eq, ne lt, le etc
  (`hello`)> ! the bactick (`) is used to encapsulate a string
â§½ else â§¼
    (`by`)>
â§½

if {true} â§¼ ! there is now else, use nested if elses, condotins must be in {} and we can use nested () within the 
  ((minus 1:10))> ! prints -15
â§½ else â§¼
  ((plus 1:10))> ! prints 17 
â§½

loop â§¼
  create input with (input `continue?`)<
  if {(eq input `y`)<} â§¼ ! there is now else, use nested if elses, condotins must be in {} and we can use nested () within the 
    continue
  â§½ else â§¼
  ! what the if/esle do can be nothing if you dont pu anything in the parenthesis
  â§½
  break
â§½