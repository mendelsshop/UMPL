find new weird bracket for scopes 
allow multiple forms of if else ie when, if and otherwiswe, else
unless condtion alternative alternative
tree language
lexically scoped at call time
help programmer autoclose things
weird bracket mismatch combinations 
quotation using ;
lazy evaluation
functions: keyword fanction, varidiac + for 1 or more * for 0 or more  preceded by number of non variadiac arguments
use 'param number' or "param number" to acces parameter
! function that takes at least 3 arguments (note that the third argument become part of the varidiac argument in this case arg3)
! if we used * instead of plus it could take at least 2 arguemtn
fanction 2+ ᚜
    ([('3' null?] not} assert]
    {"1" print)
᚛ 

link label [label]
@name -> label naem

until conditon do loop -> while _ {}
go-through  _ of _ loop -> for _ in _ {}
continue-doing loop -> loop {}
stop -> break/return (must have value)
skip -> continue

empty-tree = ;() or ;[) ...
strings = .actual words. escape sequnece/interpolation tbd
numbers: floating hex
booleans: & is true | is false ? is maybe (b/c were going for tree, we also should have 3 boolean values)

casing shneigans on keywords

if a condtional hits a maybe it will randomly choose to go or not

should try to `help` in most interesting way (using randomnsess....)

class/struct turn into "lisp object" like cons
class cons ᚜
    car
    cons

    public object (carGet) throws Exception ᚜
    car᚛ 
    public object (carMap 1) throws Exception ᚜
        let mapper '0'
        (set! car (mapper car))
    ᚛ 
᚛ 

simplfies mostly too: (inconsisteny betweeen how args are defined ie number vs symbols)
```
(define (cons 2)
    (define car '0')
    (define cdr '1')
    (define (carGet) car)
    (define (carMap 1)
        (define mapper '0')
        (set! car (mapper car))
    )
    (lambda (z)
        (cond ((= z 0) car)
              ((= z 1) cdr)
              ((= z 2) carGet))
              ((= z 3) carMap))
    )

)
(define (car z) (z 0))
(define (cdr 1) (z 1))
(define (carGet z) (z 2))
(define (carMap z mapper) ((z 3)) mapper)
! should methods take the parames the need or should they just return the procedure like accesing 
! fields
(define (carMap z) (z 3))
```

qussiquote -> :
unquote -> $

set! -> hashmap -> classes (clos)
clos


---
pass single pointer to each function for all the arguments
so ll code would be same as far as define goes
so instead of using linkedlist have it be struct/arrayz
and each variable if its a function could store the argc and varidicity
so VarType would have another variant for functions .. but whay about thunks ie if we pass in a function to another function the passed in funnction loses its argc and varidicity
or do we not used llvm function calls at all and go with something more sicp like but in llvm